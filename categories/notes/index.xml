<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on Go und die Welt</title>
    <link>https://as27.github.io/categories/notes/</link>
    <description>Recent content in Notes on Go und die Welt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de</language>
    <lastBuildDate>Sun, 05 Jun 2016 19:05:37 +0200</lastBuildDate>
    
	<atom:link href="https://as27.github.io/categories/notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vererbung in Go</title>
      <link>https://as27.github.io/blog/2016/06/05/vererbung-in-go/</link>
      <pubDate>Sun, 05 Jun 2016 19:05:37 +0200</pubDate>
      
      <guid>https://as27.github.io/blog/2016/06/05/vererbung-in-go/</guid>
      <description>Es gibt eine Klasse, welche als Basis für eine Neue Klasse dienen soll. Für dieses Beispiel Car. Über eine Funktion wird ein Pointer auf eine Instanz erzeugt:
type Car struct { speed int name string } func (c *Car) Drive (){ fmt.Println(&amp;quot;Brum brum&amp;quot;) } func NewCar() *Car { car := Car{speed: 100, name: &amp;quot;fastcar&amp;quot;} return &amp;amp;car }  Um alle Eigenschaften der ursprünglichen Klasse der neuen Klasse hinzuzufügen fügen wir Car der neuen Klasse einfach über das struct hinzu.</description>
    </item>
    
    <item>
      <title>bufio ein Reader und Writer für den Playground</title>
      <link>https://as27.github.io/blog/2016/06/05/bufio-ein-reader-und-writer-f%C3%BCr-den-playground/</link>
      <pubDate>Sun, 05 Jun 2016 18:31:29 +0200</pubDate>
      
      <guid>https://as27.github.io/blog/2016/06/05/bufio-ein-reader-und-writer-f%C3%BCr-den-playground/</guid>
      <description>Für einfache Tests benötigt man öfters einen Writer, welcher den Output an die Konsole schickt. Hierfür eignet sich sehr gut das bufio Packet in Verbindung mit os.
Das notwendige Beispiel befindet sich sogar schon direkt in der Dokumentation: https://godoc.org/bufio#example-Writer
w := bufio.NewWriter(os.Stdout) fmt.Fprint(w, &amp;quot;Hello, &amp;quot;) fmt.Fprint(w, &amp;quot;world!&amp;quot;) w.Flush() // Don&#39;t forget to flush!  https://play.golang.org/p/VZ7bbaI53z
Indem der Inhalt des Writers einfach an den os.Stdout geleitet wird, können so die Inhalte eines beliebigen os.</description>
    </item>
    
    <item>
      <title>Installation von Golang auf dem Raspberry Pi</title>
      <link>https://as27.github.io/blog/2016/05/28/installation-von-golang-auf-dem-raspberry-pi/</link>
      <pubDate>Sat, 28 May 2016 09:59:35 +0200</pubDate>
      
      <guid>https://as27.github.io/blog/2016/05/28/installation-von-golang-auf-dem-raspberry-pi/</guid>
      <description>Ich war ziemlich schockiert, als ich festgestellt habe, dass ich über apt-get nur Version 1.3 von Golang bekommen habe. Ich bin eigentlich davon ausgegangen, dass ich zumindest die fast schon ein Jahr alte Version 1.5 installiert hatte.
Jedoch warum sollte es an der Stelle anders sein. Debian benötigt halt eine gewisse Zeit, bis die Packete für aktuellere Versionen freigegeben werden. Warum sollte das bei den Golang Packeten anders sein.
Deshalb eine kurze Notiz an mich selber über eine Build Anleitung für aktuellere Versionen (hier 1.</description>
    </item>
    
    <item>
      <title>Golang Decorator Pattern</title>
      <link>https://as27.github.io/blog/2016/05/19/golang-decorator-pattern/</link>
      <pubDate>Thu, 19 May 2016 10:58:32 +0200</pubDate>
      
      <guid>https://as27.github.io/blog/2016/05/19/golang-decorator-pattern/</guid>
      <description>Dieses Pattern wurde auf der GopherCon 2015 in Denver vorgestellt. Hier die Ursprünglichen Slides zu Embrace the Interface. Der Vortrag konzentriet sich für meinen Geschmack zuwenig auf die wirklich wesentlichen Punkte.
Einfacher allgemeiner Algorithmus Dieses Pattern ermöglicht es eine Methode um beliebige Funktionen zu erweitern. Pro Funktionserweiterung wird eine Funktion verwendet (SingleResponsibility).
 Erstelle ein Interface, welches die zu erweiternde Methode beinhaltet. Erstelle einen type welcher die Methode repräsentiert. Erstelle eine Implementierung der Methode des Interface aus 1.</description>
    </item>
    
    <item>
      <title>Tutorial über Model und View in einem REST Service</title>
      <link>https://as27.github.io/blog/2016/05/17/tutorial-%C3%BCber-model-und-view-in-einem-rest-service/</link>
      <pubDate>Tue, 17 May 2016 22:40:53 +0200</pubDate>
      
      <guid>https://as27.github.io/blog/2016/05/17/tutorial-%C3%BCber-model-und-view-in-einem-rest-service/</guid>
      <description>http://stevenwhite.com/building-a-rest-service-with-golang-2/  Steven White beschreibt in seinem Tutorial, wie man einen einfachen Web Server mit Go umsetzt. Dabei gliedert er seinen Code in Model und Controller. Alle Models werden dabei in einem Packet models und die Controller in einem Packet controller umgesetzt.
Dieses Pattern ist übersichtlich und führt zu einem strukturierten Code.</description>
    </item>
    
    <item>
      <title>Client tests in Golang mit httptest</title>
      <link>https://as27.github.io/blog/2016/05/17/client-tests-in-golang-mit-httptest/</link>
      <pubDate>Tue, 17 May 2016 10:07:30 +0200</pubDate>
      
      <guid>https://as27.github.io/blog/2016/05/17/client-tests-in-golang-mit-httptest/</guid>
      <description>Bei der Erstellung von Microservices mittels eine REST API gibt es bei der Kommunikation zwischen zwei Diensten neben dem Empfänger (Server) immer auch eine sendende Seite (Client).
Für das Testen von http Anfragen an einen Server bietet das httptest Packet einen eigenen Testserver an. Mit der Funktion NewServer() lässt sich der Testserver starten. Dabei wird eine Referenz auf eine Server instanz zurück gegeben.
Der Client muss nun für den Test die richtige URL verwenden.</description>
    </item>
    
    <item>
      <title>Golang und die Zeit: Das magische Datum</title>
      <link>https://as27.github.io/blog/2016/05/15/golang-und-die-zeit-das-magische-datum/</link>
      <pubDate>Sun, 15 May 2016 15:37:02 +0200</pubDate>
      
      <guid>https://as27.github.io/blog/2016/05/15/golang-und-die-zeit-das-magische-datum/</guid>
      <description>Die Dokumentation zu dem Packet time ist bezüglich der Formatierung des Datums nicht sehr ausführlich. Deshalb soll die fast schon geniale Logik kurz vorgestellt werden.
Das magische Datum Der Ansatz von go ist anders als bekannt. Die Definition des Datum-Format erfolgt dabei nicht über Flags sondern über ein fest eindeutig definiertes Datum.
Die Dokumentation hat in dem Packet bereits ein paar Konstanten definiert: https://godoc.org/time#pkg-constants
 ANSIC = &amp;ldquo;Mon Jan _2 15:04:05 2006&amp;rdquo;</description>
    </item>
    
  </channel>
</rss>