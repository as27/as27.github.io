<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Komposition on Go und die Welt</title>
    <link>https://as27.github.io/categories/komposition/</link>
    <description>Recent content in Komposition on Go und die Welt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de</language>
    <lastBuildDate>Sun, 05 Mar 2017 12:25:50 +0100</lastBuildDate>
    
	<atom:link href="https://as27.github.io/categories/komposition/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Komposition für Anfänger</title>
      <link>https://as27.github.io/blog/2017/03/05/komposition-f%C3%BCr-anf%C3%A4nger/</link>
      <pubDate>Sun, 05 Mar 2017 12:25:50 +0100</pubDate>
      
      <guid>https://as27.github.io/blog/2017/03/05/komposition-f%C3%BCr-anf%C3%A4nger/</guid>
      <description>Ein ganz einfaches Beispiel soll zeigen, was alles mit der Komposition in Go möglich ist. Nehmen wir mal folgendes Beispiel an.
Es gibt einen Typ A, welches eine Methode Print() besitzt. Typ B hat in seiner Definition auf Typ A im Bauch. Wäre Go nun objekt-orientiert, würde man auch sagen, B erbt alles von A. Dadurch kann eine Instanz von B eigentlich auch alles was A kann.
Diese Erkenntnis ist erstmal nichts besonderes.</description>
    </item>
    
  </channel>
</rss>