<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pattern on Go und die Welt</title>
    <link>https://as27.github.io/categories/pattern/</link>
    <description>Recent content in Pattern on Go und die Welt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de</language>
    <lastBuildDate>Thu, 19 May 2016 10:58:32 +0200</lastBuildDate>
    
	<atom:link href="https://as27.github.io/categories/pattern/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang Decorator Pattern</title>
      <link>https://as27.github.io/blog/2016/05/19/golang-decorator-pattern/</link>
      <pubDate>Thu, 19 May 2016 10:58:32 +0200</pubDate>
      
      <guid>https://as27.github.io/blog/2016/05/19/golang-decorator-pattern/</guid>
      <description>Dieses Pattern wurde auf der GopherCon 2015 in Denver vorgestellt. Hier die Ursprünglichen Slides zu Embrace the Interface. Der Vortrag konzentriet sich für meinen Geschmack zuwenig auf die wirklich wesentlichen Punkte.
Einfacher allgemeiner Algorithmus Dieses Pattern ermöglicht es eine Methode um beliebige Funktionen zu erweitern. Pro Funktionserweiterung wird eine Funktion verwendet (SingleResponsibility).
 Erstelle ein Interface, welches die zu erweiternde Methode beinhaltet. Erstelle einen type welcher die Methode repräsentiert. Erstelle eine Implementierung der Methode des Interface aus 1.</description>
    </item>
    
  </channel>
</rss>