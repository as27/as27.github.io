<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Link on Go und die Welt</title>
    <link>https://as27.github.io/categories/link/</link>
    <description>Recent content in Link on Go und die Welt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de</language>
    <lastBuildDate>Mon, 12 Dec 2016 19:28:44 +0100</lastBuildDate>
    
	<atom:link href="https://as27.github.io/categories/link/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linktipp: William Kennedy über Go</title>
      <link>https://as27.github.io/blog/2016/12/12/linktipp-william-kennedy-%C3%BCber-go/</link>
      <pubDate>Mon, 12 Dec 2016 19:28:44 +0100</pubDate>
      
      <guid>https://as27.github.io/blog/2016/12/12/linktipp-william-kennedy-%C3%BCber-go/</guid>
      <description>Ein wirklich toller Vortrag von William Kennedy über Go&amp;rsquo;s Codesmell und Komposition.
Das Besondere hier sind nicht Teckniken oder Patterns, welche gezeigt werden, sondern William spricht über grundsätzliche Besonderheiten von Go.
 Was ist das besondere von Go? Wann ist meine Tests fertig? Wann sollte ich ein Interface definieren?  Go Talk &amp;amp; Ask Me Anything With William Kennedy</description>
    </item>
    
    <item>
      <title>Installation von Golang auf dem Raspberry Pi</title>
      <link>https://as27.github.io/blog/2016/05/28/installation-von-golang-auf-dem-raspberry-pi/</link>
      <pubDate>Sat, 28 May 2016 09:59:35 +0200</pubDate>
      
      <guid>https://as27.github.io/blog/2016/05/28/installation-von-golang-auf-dem-raspberry-pi/</guid>
      <description>Ich war ziemlich schockiert, als ich festgestellt habe, dass ich über apt-get nur Version 1.3 von Golang bekommen habe. Ich bin eigentlich davon ausgegangen, dass ich zumindest die fast schon ein Jahr alte Version 1.5 installiert hatte.
Jedoch warum sollte es an der Stelle anders sein. Debian benötigt halt eine gewisse Zeit, bis die Packete für aktuellere Versionen freigegeben werden. Warum sollte das bei den Golang Packeten anders sein.
Deshalb eine kurze Notiz an mich selber über eine Build Anleitung für aktuellere Versionen (hier 1.</description>
    </item>
    
    <item>
      <title>Links</title>
      <link>https://as27.github.io/links/</link>
      <pubDate>Wed, 18 May 2016 19:37:11 +0200</pubDate>
      
      <guid>https://as27.github.io/links/</guid>
      <description> Gopher Conventions  GopherCon 2015 Denver:  Decorator Pattern Slides (pdf)  GoUK 2015 Beyond Code - Gophercon   Spannende Links  10 things you (probably) don&amp;rsquo;t know about Go by Andrew Gerrand  7 common mistakes in Go (2015) Achieving a Perfect SSL Labs Score with Go Awesome Go Philipp Hauer: Design Patterns Go patterns (wird anscheinend nicht weiter gepflegt) Go Language Patterns (anscheinend noch under construction) Visualizing concurrency in Go   Testing  Ginkgo - BDD Testing Framework Testing your (HTTP) handlers in Go   Tutorials  Building a REST service in Golang: Model Controller Pattern  </description>
    </item>
    
    <item>
      <title>Link: GopherCon 2015</title>
      <link>https://as27.github.io/blog/2016/05/18/link-gophercon-2015/</link>
      <pubDate>Wed, 18 May 2016 19:30:23 +0200</pubDate>
      
      <guid>https://as27.github.io/blog/2016/05/18/link-gophercon-2015/</guid>
      <description>https://blog.golang.org/gophercon2015  Auf dem Blogeintrag zur GopherCon2015 gibt es eine gute Übersicht zu den einzelnen Vorträgen.
Empfehlenswert sind die Slides zu Embrace the Interface. Der Vortrag selber ist für meinen Geschmack ein wenig holperig. Jedoch das Vorgestellte Decorator Pattern ist fast schon ein Muß für jeden Gopher.</description>
    </item>
    
    <item>
      <title>Tutorial über Model und View in einem REST Service</title>
      <link>https://as27.github.io/blog/2016/05/17/tutorial-%C3%BCber-model-und-view-in-einem-rest-service/</link>
      <pubDate>Tue, 17 May 2016 22:40:53 +0200</pubDate>
      
      <guid>https://as27.github.io/blog/2016/05/17/tutorial-%C3%BCber-model-und-view-in-einem-rest-service/</guid>
      <description>http://stevenwhite.com/building-a-rest-service-with-golang-2/  Steven White beschreibt in seinem Tutorial, wie man einen einfachen Web Server mit Go umsetzt. Dabei gliedert er seinen Code in Model und Controller. Alle Models werden dabei in einem Packet models und die Controller in einem Packet controller umgesetzt.
Dieses Pattern ist übersichtlich und führt zu einem strukturierten Code.</description>
    </item>
    
  </channel>
</rss>