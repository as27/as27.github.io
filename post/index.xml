<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Go und die Welt</title>
    <link>https://as27.github.io/post/</link>
    <description>Recent content in Posts on Go und die Welt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de</language>
    <lastBuildDate>Sun, 04 Feb 2018 20:44:26 +0100</lastBuildDate>
    
	<atom:link href="https://as27.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mein io.Reader und io.Writer Interface</title>
      <link>https://as27.github.io/blog/2018/02/04/mein-io.reader-und-io.writer-interface/</link>
      <pubDate>Sun, 04 Feb 2018 20:44:26 +0100</pubDate>
      
      <guid>https://as27.github.io/blog/2018/02/04/mein-io.reader-und-io.writer-interface/</guid>
      <description>Dieser Post beschäftigt sich mit einer Möglichkeit des Refactorings, wenn externe Interfaces als Input von Funktionen verwendet werden. In dem Beispiel verwende ich den io.Reader da dieser sehr einfach aufgebaut ist und außerdem dürfte dieser Reader bereits von jedem Gopher schon öfters verwendet worden sein.
Fangen wir mal ganz einfach mit einer Funktion an:
import ( &amp;quot;io&amp;quot; ) func leseWas(r io.Reader) { // ... }  Die Funktion leseWas nimmt einen io.</description>
    </item>
    
    <item>
      <title>Einführung in Go</title>
      <link>https://as27.github.io/blog/2018/01/29/einf%C3%BChrung-in-go/</link>
      <pubDate>Mon, 29 Jan 2018 15:36:50 +0100</pubDate>
      
      <guid>https://as27.github.io/blog/2018/01/29/einf%C3%BChrung-in-go/</guid>
      <description>Während der Weihnachtsfeiertage hatte ich Zeit meinen ersten Udemy Kurs fertig zustellen. Der Kurs ist für Anfänger gedacht, welche einen schnellen Einstieg in Go benötigen. Es gibt viele Beispielaufgaben, welche über den Go Playground alle gelöst werden können.
Die Übungsaufgaben beinhalten die meisten Sprachelemente. Der Kurs hat zum Ziel die Syntax von Go näher zu bringen. Es soll ein Grundlagenkurs sein, welche Personen ohne große Go Erfahrung belegen können, um die Sprachsyntax zu verstehen.</description>
    </item>
    
    <item>
      <title>go.rice mit dem Gorillatoolkit verwenden</title>
      <link>https://as27.github.io/blog/2017/04/07/go.rice-mit-dem-gorillatoolkit-verwenden/</link>
      <pubDate>Fri, 07 Apr 2017 12:25:50 +0100</pubDate>
      
      <guid>https://as27.github.io/blog/2017/04/07/go.rice-mit-dem-gorillatoolkit-verwenden/</guid>
      <description>go.rice ist ein sehr nützliches Tool, um weitere Dateien in die Go App zu packen. Hierfür werden die Textdateien einfach in go Dateien eingefügt. Bei der Verwendung des Routers des Gorillatoolkits muss beachtet werden, dass man die Methode PathPrefix() verwendet.
Das ganze sieht dann im Code wie folgt aus:
r := mux.NewRouter() box := rice.MustFindBox(&amp;quot;html&amp;quot;) htmlFiles := http.StripPrefix(&amp;quot;/lib/&amp;quot;, http.FileServer(box.HTTPBox())) r.PathPrefix(&amp;quot;/lib/&amp;quot;).Handler(htmlFiles)  </description>
    </item>
    
    <item>
      <title>Feldnamen eines struct</title>
      <link>https://as27.github.io/blog/2017/03/23/feldnamen-eines-struct/</link>
      <pubDate>Thu, 23 Mar 2017 17:07:37 +0100</pubDate>
      
      <guid>https://as27.github.io/blog/2017/03/23/feldnamen-eines-struct/</guid>
      <description>Wenn man einmal wissen möchte, welche Elemente ein struct besitzt:
func getFields(i interface{}) []string { var fields []string tempintslice := []int{0} ielements := reflect.TypeOf(i).Elem().NumField() for j := 0; j &amp;lt; ielements; j++ { tempintslice[0] = j f := reflect.TypeOf(i).Elem().FieldByIndex(tempintslice) fields = append(fields, f.Name) } return fields }  https://play.golang.org/p/QAgLMIwhyl</description>
    </item>
    
    <item>
      <title>Komposition für Anfänger</title>
      <link>https://as27.github.io/blog/2017/03/05/komposition-f%C3%BCr-anf%C3%A4nger/</link>
      <pubDate>Sun, 05 Mar 2017 12:25:50 +0100</pubDate>
      
      <guid>https://as27.github.io/blog/2017/03/05/komposition-f%C3%BCr-anf%C3%A4nger/</guid>
      <description>Ein ganz einfaches Beispiel soll zeigen, was alles mit der Komposition in Go möglich ist. Nehmen wir mal folgendes Beispiel an.
Es gibt einen Typ A, welches eine Methode Print() besitzt. Typ B hat in seiner Definition auf Typ A im Bauch. Wäre Go nun objekt-orientiert, würde man auch sagen, B erbt alles von A. Dadurch kann eine Instanz von B eigentlich auch alles was A kann.
Diese Erkenntnis ist erstmal nichts besonderes.</description>
    </item>
    
    <item>
      <title>Linktipp: William Kennedy über Go</title>
      <link>https://as27.github.io/blog/2016/12/12/linktipp-william-kennedy-%C3%BCber-go/</link>
      <pubDate>Mon, 12 Dec 2016 19:28:44 +0100</pubDate>
      
      <guid>https://as27.github.io/blog/2016/12/12/linktipp-william-kennedy-%C3%BCber-go/</guid>
      <description>Ein wirklich toller Vortrag von William Kennedy über Go&amp;rsquo;s Codesmell und Komposition.
Das Besondere hier sind nicht Teckniken oder Patterns, welche gezeigt werden, sondern William spricht über grundsätzliche Besonderheiten von Go.
 Was ist das besondere von Go? Wann ist meine Tests fertig? Wann sollte ich ein Interface definieren?  Go Talk &amp;amp; Ask Me Anything With William Kennedy</description>
    </item>
    
    <item>
      <title>OpenData Hamburg - Beteiligungsbericht</title>
      <link>https://as27.github.io/blog/2016/11/26/opendata-hamburg---beteiligungsbericht/</link>
      <pubDate>Sat, 26 Nov 2016 16:04:16 +0100</pubDate>
      
      <guid>https://as27.github.io/blog/2016/11/26/opendata-hamburg---beteiligungsbericht/</guid>
      <description>Meine nächsten privaten Projekte sollen ein wenig mehr aus dem Bereich OpenData kommen. Das ganze soll im Rahmen Code for Hamburg statt finden. Um an der Stelle auch GitHubPages nutzen zu können hab ich nun die Organisation OpenDataHH angelegt.
Ziel ist es dabei Daten aus dem Transparenzportal Hamburg zu nutzen. Nach einer ersten Sichtung sind leider nicht allzuviele Dateien in guten Formaten vorhanden. Lediglich ein paar Dateien im XML Format konnte ich über die Suchmaske finden.</description>
    </item>
    
    <item>
      <title>Coding da Vinci: Familiennamen</title>
      <link>https://as27.github.io/blog/2016/11/26/coding-da-vinci-familiennamen/</link>
      <pubDate>Sat, 26 Nov 2016 11:28:44 +0100</pubDate>
      
      <guid>https://as27.github.io/blog/2016/11/26/coding-da-vinci-familiennamen/</guid>
      <description>Ein Projekt von Coding da Vinci Nord 2016 mit, meiner Meinung nach, viel zuwenig Aufmerksamkeit ist das Familiennamen Projekt von Jörn Dinkla. Technisch dürfte dieses Projekt sicher um einiges anspruchsvoller sein als der Gewinner des Technik Preises.
Das Projekt beschäftigt sich mit Familiennamen. Dabei wird der einzelne Name auch nach ähnlichen Ausdrücken untersucht. Die Ausgabe kann entweder auf einer Karte oder über einen Graph ausgegeben werden. Definitiv ein spannendes Projekt, welches technisch auch toll umgesetzt wurde.</description>
    </item>
    
    <item>
      <title>Vererbung in Go</title>
      <link>https://as27.github.io/blog/2016/06/05/vererbung-in-go/</link>
      <pubDate>Sun, 05 Jun 2016 19:05:37 +0200</pubDate>
      
      <guid>https://as27.github.io/blog/2016/06/05/vererbung-in-go/</guid>
      <description>Es gibt eine Klasse, welche als Basis für eine Neue Klasse dienen soll. Für dieses Beispiel Car. Über eine Funktion wird ein Pointer auf eine Instanz erzeugt:
type Car struct { speed int name string } func (c *Car) Drive (){ fmt.Println(&amp;quot;Brum brum&amp;quot;) } func NewCar() *Car { car := Car{speed: 100, name: &amp;quot;fastcar&amp;quot;} return &amp;amp;car }  Um alle Eigenschaften der ursprünglichen Klasse der neuen Klasse hinzuzufügen fügen wir Car der neuen Klasse einfach über das struct hinzu.</description>
    </item>
    
    <item>
      <title>bufio ein Reader und Writer für den Playground</title>
      <link>https://as27.github.io/blog/2016/06/05/bufio-ein-reader-und-writer-f%C3%BCr-den-playground/</link>
      <pubDate>Sun, 05 Jun 2016 18:31:29 +0200</pubDate>
      
      <guid>https://as27.github.io/blog/2016/06/05/bufio-ein-reader-und-writer-f%C3%BCr-den-playground/</guid>
      <description>Für einfache Tests benötigt man öfters einen Writer, welcher den Output an die Konsole schickt. Hierfür eignet sich sehr gut das bufio Packet in Verbindung mit os.
Das notwendige Beispiel befindet sich sogar schon direkt in der Dokumentation: https://godoc.org/bufio#example-Writer
w := bufio.NewWriter(os.Stdout) fmt.Fprint(w, &amp;quot;Hello, &amp;quot;) fmt.Fprint(w, &amp;quot;world!&amp;quot;) w.Flush() // Don&#39;t forget to flush!  https://play.golang.org/p/VZ7bbaI53z
Indem der Inhalt des Writers einfach an den os.Stdout geleitet wird, können so die Inhalte eines beliebigen os.</description>
    </item>
    
    <item>
      <title>Installation von Golang auf dem Raspberry Pi</title>
      <link>https://as27.github.io/blog/2016/05/28/installation-von-golang-auf-dem-raspberry-pi/</link>
      <pubDate>Sat, 28 May 2016 09:59:35 +0200</pubDate>
      
      <guid>https://as27.github.io/blog/2016/05/28/installation-von-golang-auf-dem-raspberry-pi/</guid>
      <description>Ich war ziemlich schockiert, als ich festgestellt habe, dass ich über apt-get nur Version 1.3 von Golang bekommen habe. Ich bin eigentlich davon ausgegangen, dass ich zumindest die fast schon ein Jahr alte Version 1.5 installiert hatte.
Jedoch warum sollte es an der Stelle anders sein. Debian benötigt halt eine gewisse Zeit, bis die Packete für aktuellere Versionen freigegeben werden. Warum sollte das bei den Golang Packeten anders sein.
Deshalb eine kurze Notiz an mich selber über eine Build Anleitung für aktuellere Versionen (hier 1.</description>
    </item>
    
    <item>
      <title>Golang Decorator Pattern</title>
      <link>https://as27.github.io/blog/2016/05/19/golang-decorator-pattern/</link>
      <pubDate>Thu, 19 May 2016 10:58:32 +0200</pubDate>
      
      <guid>https://as27.github.io/blog/2016/05/19/golang-decorator-pattern/</guid>
      <description>Dieses Pattern wurde auf der GopherCon 2015 in Denver vorgestellt. Hier die Ursprünglichen Slides zu Embrace the Interface. Der Vortrag konzentriet sich für meinen Geschmack zuwenig auf die wirklich wesentlichen Punkte.
Einfacher allgemeiner Algorithmus Dieses Pattern ermöglicht es eine Methode um beliebige Funktionen zu erweitern. Pro Funktionserweiterung wird eine Funktion verwendet (SingleResponsibility).
 Erstelle ein Interface, welches die zu erweiternde Methode beinhaltet. Erstelle einen type welcher die Methode repräsentiert. Erstelle eine Implementierung der Methode des Interface aus 1.</description>
    </item>
    
    <item>
      <title>Link: GopherCon 2015</title>
      <link>https://as27.github.io/blog/2016/05/18/link-gophercon-2015/</link>
      <pubDate>Wed, 18 May 2016 19:30:23 +0200</pubDate>
      
      <guid>https://as27.github.io/blog/2016/05/18/link-gophercon-2015/</guid>
      <description>https://blog.golang.org/gophercon2015  Auf dem Blogeintrag zur GopherCon2015 gibt es eine gute Übersicht zu den einzelnen Vorträgen.
Empfehlenswert sind die Slides zu Embrace the Interface. Der Vortrag selber ist für meinen Geschmack ein wenig holperig. Jedoch das Vorgestellte Decorator Pattern ist fast schon ein Muß für jeden Gopher.</description>
    </item>
    
    <item>
      <title>Tutorial über Model und View in einem REST Service</title>
      <link>https://as27.github.io/blog/2016/05/17/tutorial-%C3%BCber-model-und-view-in-einem-rest-service/</link>
      <pubDate>Tue, 17 May 2016 22:40:53 +0200</pubDate>
      
      <guid>https://as27.github.io/blog/2016/05/17/tutorial-%C3%BCber-model-und-view-in-einem-rest-service/</guid>
      <description>http://stevenwhite.com/building-a-rest-service-with-golang-2/  Steven White beschreibt in seinem Tutorial, wie man einen einfachen Web Server mit Go umsetzt. Dabei gliedert er seinen Code in Model und Controller. Alle Models werden dabei in einem Packet models und die Controller in einem Packet controller umgesetzt.
Dieses Pattern ist übersichtlich und führt zu einem strukturierten Code.</description>
    </item>
    
    <item>
      <title>Client tests in Golang mit httptest</title>
      <link>https://as27.github.io/blog/2016/05/17/client-tests-in-golang-mit-httptest/</link>
      <pubDate>Tue, 17 May 2016 10:07:30 +0200</pubDate>
      
      <guid>https://as27.github.io/blog/2016/05/17/client-tests-in-golang-mit-httptest/</guid>
      <description>Bei der Erstellung von Microservices mittels eine REST API gibt es bei der Kommunikation zwischen zwei Diensten neben dem Empfänger (Server) immer auch eine sendende Seite (Client).
Für das Testen von http Anfragen an einen Server bietet das httptest Packet einen eigenen Testserver an. Mit der Funktion NewServer() lässt sich der Testserver starten. Dabei wird eine Referenz auf eine Server instanz zurück gegeben.
Der Client muss nun für den Test die richtige URL verwenden.</description>
    </item>
    
    <item>
      <title>Golang und die Zeit: Das magische Datum</title>
      <link>https://as27.github.io/blog/2016/05/15/golang-und-die-zeit-das-magische-datum/</link>
      <pubDate>Sun, 15 May 2016 15:37:02 +0200</pubDate>
      
      <guid>https://as27.github.io/blog/2016/05/15/golang-und-die-zeit-das-magische-datum/</guid>
      <description>Die Dokumentation zu dem Packet time ist bezüglich der Formatierung des Datums nicht sehr ausführlich. Deshalb soll die fast schon geniale Logik kurz vorgestellt werden.
Das magische Datum Der Ansatz von go ist anders als bekannt. Die Definition des Datum-Format erfolgt dabei nicht über Flags sondern über ein fest eindeutig definiertes Datum.
Die Dokumentation hat in dem Packet bereits ein paar Konstanten definiert: https://godoc.org/time#pkg-constants
 ANSIC = &amp;ldquo;Mon Jan _2 15:04:05 2006&amp;rdquo;</description>
    </item>
    
  </channel>
</rss>